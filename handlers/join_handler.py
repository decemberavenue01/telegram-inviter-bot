from aiogram import Router, F, Bot
from aiogram.types import (
    ChatJoinRequest, Message, InputMediaPhoto,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.types.input_file import FSInputFile
from urllib.parse import quote
import asyncio
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
import os
import logging

from users_db import add_user, has_seen_intro, mark_intro_sent

router = Router()

BOT_USERNAME = "RAY_TRADER_BOT"
OWNER_USERNAME = "ray_trdr"


def learn_more_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ãüí∏",
                callback_data=f"check_result:{user_id}"
            )]
        ]
    )


def get_bonus_kb() -> InlineKeyboardMarkup:
    text = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ªüí¨",
                url=f"https://t.me/{OWNER_USERNAME}?text={text}"
            )]
        ]
    )


async def send_intro_with_media(user_id: int, bot: Bot):
    logging.info(f"send_intro_with_media –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")

    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏–Ω—Ç—Ä–æ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    # if await has_seen_intro(user_id):
    #     logging.info(f"user_id={user_id} —É–∂–µ –≤–∏–¥–µ–ª –∏–Ω—Ç—Ä–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
    #     return

    media_files = [
        "media/welcome2.jpg",
        "media/welcome3.jpg",
        "media/welcome4.jpg",
        "media/welcome5.jpg",
        "media/welcome6.jpg"
    ]

    try:
        media_group = []
        for file in media_files:
            if os.path.exists(file):
                media_group.append(InputMediaPhoto(media=FSInputFile(file)))
        if media_group:
            await bot.send_media_group(chat_id=user_id, media=media_group)

        await bot.send_message(
            chat_id=user_id,
            text=(
                "ü§ùüèª<b>–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–æ–µ–º—É –∫–∞–Ω–∞–ª—É —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è —Å –í–ê–õ–Æ–¢–ù–´–ú –†–´–ù–ö–û–úüíπ</b>\n\n"
                "<blockquote><b>–ú—ã —Ç–æ—Ä–≥—É–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É –∏ —è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤—ã–∫–ª–∞–¥—ã–≤–∞—é –æ—Ç—á—ë—Ç—ã!</b></blockquote>\n\n"
                "–ú–æ–π <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b> –∫–∞–Ω–∞–ª —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ –æ–±—É—á–∞—é—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è:\n"
                "<tg-spoiler><b>The R.A.Y. Protocol</b></tg-spoiler>\n\n"
                "<i>–ù–∞–ø–∏—à–∏ –º–Ω–µ</i>\n"
                "<b>¬´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª ¬ª</b>, –∏ —è –¥–∞–º –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!üòâ\n\n"
                "‚ùï–í–ê–ñ–ù–´–ô –ú–û–ú–ï–ù–¢‚ùï\n\n"
                "–£ –º–µ–Ω—è –µ—Å—Ç—å <b>–ë–û–ù–£–°</b>, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ —Å—Ç–∞—Ä—Ç–∞–Ω—É—Ç—å –∏ —É–≤–∏–¥–µ—Ç—å <b>—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</b>üí∞üí∞üí∞"
            ),
            reply_markup=get_bonus_kb(),
            parse_mode=ParseMode.HTML
        )

        await asyncio.sleep(20)

        await bot.send_message(
            chat_id=user_id,
            text=(
                "‚ö°Ô∏è<b>–í–∞–∂–Ω–æ</b>‚ö°Ô∏è\n\n"
                "üîï<b>–ù–µ –æ—Ç–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.</b>\n"
                "–û–Ω –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
                "–£–∂–µ —Å–∫–æ—Ä–æ —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—é!"
            ),
            parse_mode=ParseMode.HTML
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É, —á—Ç–æ –∏–Ω—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await mark_intro_sent(user_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ç—Ä–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}: {e}")
        # –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
        logging.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º.")


@router.chat_join_request()
async def handle_join_request(join_request: ChatJoinRequest, bot: Bot):
    user_id = join_request.from_user.id
    chat_id = join_request.chat.id

    try:
        await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
        await add_user(user_id)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    start_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ãüí∏", url=start_link)]
    ])

    photo_path = "media/welcome.jpg"
    if os.path.exists(photo_path):
        photo = FSInputFile(photo_path)
        await bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption=(
                "üëãüèª<b>–ü—Ä–∏–≤–µ—Ç! —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª!</b>\n\n"
                "–£ –º–µ–Ω—è –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö:\n"
                "<blockquote>‚ùå<b>VIP –∫–∞–Ω–∞–ª–æ–≤.\n"
                "‚ùå–ü–ª–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n"
                "‚ùå–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</b></blockquote>\n\n"
                "–ú–æ—è —Ü–µ–ª—å –Ω–∞–±—Ä–∞—Ç—å <b>100k –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!</b>\n"
                "–Ø —Ç–æ—Ä–≥—É—é –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å <b>Winrate 90%!</b> —Ç–µ–º —Å–∞–º—ã–º –ø—Ä–∏—É–º–Ω–æ–∂–∞—é —Å–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª –∏ –ø–æ–º–æ–≥–∞—é –≤ —ç—Ç–æ–º —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!\n\n"
                "‚ö†Ô∏è<b>–ö–∞–∫ –∏–º–µ–Ω–Ω–æ —è –ø–æ–º–æ–≥–∞—é:</b>\n"
                "<blockquote>üî∏<b>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ–≤–æ–∂—É —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–± –≤—ã –º–æ–≥–ª–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π</b>\n"
                "üî∏<b>–î–∞—é –ø–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b></blockquote>\n\n"
                "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —É–∑–Ω–∞–µ—à—å –∫–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—ã —Å–º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Å <b>–ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è</b>üëáüèª"
            ),
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )


@router.message(CommandStart(deep_link=True))
async def start_handler(message: Message, bot: Bot):
    user_id = message.from_user.id
    await add_user(user_id)

    args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    logging.info(f"/start –≤—ã–∑–≤–∞–Ω —Å args={args}")

    await send_intro_with_media(user_id, bot)


@router.callback_query(F.data.startswith("check_result:"))
async def handle_check_result(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback check_result –¥–ª—è user_id={user_id}")
    await send_intro_with_media(user_id, bot)
    await callback.answer()
